{
  "_args": [
    [
      {
        "raw": "ng2-drag-drop",
        "scope": null,
        "escapedName": "ng2-drag-drop",
        "name": "ng2-drag-drop",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\node\\aa2\\client"
    ]
  ],
  "_from": "ng2-drag-drop@latest",
  "_id": "ng2-drag-drop@2.0.0",
  "_inCache": true,
  "_location": "/ng2-drag-drop",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ng2-drag-drop-2.0.0.tgz_1495218245052_0.10993796749971807"
  },
  "_npmUser": {
    "name": "obaid",
    "email": "obaid@live.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ng2-drag-drop",
    "scope": null,
    "escapedName": "ng2-drag-drop",
    "name": "ng2-drag-drop",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/ng2-drag-drop/-/ng2-drag-drop-2.0.0.tgz",
  "_shasum": "4d194979f119d41d349fb1e524e8d2f96dbc2b5a",
  "_shrinkwrap": null,
  "_spec": "ng2-drag-drop",
  "_where": "D:\\node\\aa2\\client",
  "author": {
    "name": "Obaid ur Rehman",
    "email": "obaid.urrehman@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/ObaidUrRehman/ng2-drag-drop/issues"
  },
  "dependencies": {},
  "description": "Drag & Drop for Angular2 and beyond - based on HTML5 with no external dependencies.",
  "devDependencies": {
    "@angular/common": "^4.0.0",
    "@angular/compiler": "^4.0.0",
    "@angular/compiler-cli": "^4.0.0",
    "@angular/core": "^4.0.0",
    "@angular/platform-browser": "^4.0.0",
    "@angular/platform-browser-dynamic": "^4.0.0",
    "@types/core-js": "0.9.35",
    "canonical-path": "0.0.2",
    "concurrently": "^3.4.0",
    "core-js": "^2.4.1",
    "http-server": "^0.10.0",
    "jasmine-core": "~2.6.0",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-cli": "^1.0.1",
    "karma-htmlfile-reporter": "^0.3.4",
    "karma-jasmine": "^1.0.2",
    "karma-jasmine-html-reporter": "^0.2.2",
    "lite-server": "^2.2.2",
    "lodash": "^4.16.4",
    "protractor": "~5.1.1",
    "rimraf": "^2.5.4",
    "rxjs": "5.0.1",
    "tslint": "^5.0.0",
    "typescript": "^2.0.0",
    "zone.js": "^0.8.4"
  },
  "directories": {},
  "dist": {
    "shasum": "4d194979f119d41d349fb1e524e8d2f96dbc2b5a",
    "tarball": "https://registry.npmjs.org/ng2-drag-drop/-/ng2-drag-drop-2.0.0.tgz"
  },
  "gitHead": "2367fae07ce25f6503d6af16e36c3b8c978f0832",
  "homepage": "https://github.com/ObaidUrRehman/ng2-drag-drop#readme",
  "keywords": [
    "Angular2",
    "Angular4",
    "Angular",
    "drag",
    "drop",
    "dragdrop"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "obaid",
      "email": "obaid@live.com"
    }
  ],
  "name": "ng2-drag-drop",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": "^4.0.0 || ^2.0.0",
    "@angular/core": "^4.0.0 || ^2.0.0"
  },
  "readme": "# Angular Drag & Drop (v2 and beyond)\r\n[![npm version](https://img.shields.io/npm/v/ng2-drag-drop.svg)](https://www.npmjs.com/package/ng2-drag-drop) [![npm downloads](https://img.shields.io/npm/dm/ng2-drag-drop.svg)](https://www.npmjs.com/package/ng2-drag-drop) [![Devdependency Status](https://david-dm.org/ObaidUrRehman/ng2-drag-drop/dev-status.svg)](https://david-dm.org/ObaidUrRehman/ng2-drag-drop#info=devDependencies) [![Build Status](https://travis-ci.org/ObaidUrRehman/ng2-drag-drop.svg?branch=master)](https://travis-ci.org/ObaidUrRehman/ng2-drag-drop) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/f14c9c63579044e290d7d5cf9a9cda52)](https://www.codacy.com/app/orehman/ng2-drag-drop?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ObaidUrRehman/ng2-drag-drop&amp;utm_campaign=Badge_Grade)\r\n\r\nDrag & Drop for Angular 2 and beyond, based on HTML5 with no external dependencies. Provides `draggable` & `droppable` directives. Features:\r\n* Transfer data from `draggable` to `droppable`.\r\n* Restrict drop based on drag-drop scopes.\r\n* Restrict drag to happen from either drag handles or the entire element.\r\n* Add custom drag Helper Image\r\n* Ability to add custom visual cue styles.\r\n\r\n![Demo](https://raw.githubusercontent.com/ObaidUrRehman/ng2-drag-drop/master/drag-drop.gif)\r\n\r\n# Demo\r\n\r\nCheck out the [Plunker demo](http://plnkr.co/edit/2bjGgzWnbFrciEiCKLew?p=preview).\r\n\r\n\r\nThe [demo folder](https://github.com/ObaidUrRehman/ng2-drag-drop/tree/master/demo) of the repository contains the same demo as Plunkr that uses SystemJS. To run that demo do an `npm install` in that folder followed by `npm start` to serve the demo app.\r\n\r\n# Installation\r\n```js\r\nnpm install ng2-drag-drop --save\r\n```\r\n\r\n# Usage\r\n\r\n### Import default styles\r\nImport `style.css` into your index.html. It has a set of default styles that will be applied upon drag operations. This is totally optional and you can modify the styles as per your need. See the [Adding visual cues](#adding-visual-cues) Section.\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"node_modules/ng2-drag-drop/style.css\">\r\n```\r\n\r\n### Update SystemJS config\r\nIf you use SystemJS as your module loader then you will need to update the config to load the `ng2-drag-drop` module.\r\n```js\r\nSystem.config({\r\n    map: {\r\n        'ng2-drag-drop': 'node_modules/ng2-drag-drop'\r\n    },\r\n    packages: {\r\n        'ng2-drag-drop':  { main: 'index.js',  defaultExtension: 'js' },\r\n    }\r\n});\r\n```\r\n### Import `Ng2DragDropModule`\r\n\r\nYou need to import the `Ng2DragDropModule` in the module of your app where you want to use it.\r\n\r\n```js\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { DemoComponent } from \"./components/demo-component\";\r\nimport { Ng2DragDropModule } from 'ng2-drag-drop';\r\n\r\n\r\n@NgModule({\r\n  imports: [BrowserModule, Ng2DragDropModule],\r\n  declarations: [DemoComponent],\r\n  bootstrap: [DemoComponent]\r\n})\r\nexport class AppModule {}\r\n```\r\n\r\n### Use the `draggable` & `droppable` directives\r\nPlace the `draggable` directive on an element that you want to be draggable. The following example makes the\r\n List item draggable:\r\n\r\n```html\r\n<ul>\r\n  <li draggable>Coffee</li>\r\n  <li draggable>Tea</li>\r\n  <li draggable>Milk</li>\r\n</ul>               \r\n```\r\n\r\nSimilarly use the `droppable` directive on an element where you want to drop `draggable`:\r\n \r\n ```html\r\n <div droppable>\r\n   <p>Drop items here</p>\r\n </div>               \r\n ```\r\n\r\n### Restrict Drop based on Scopes\r\nYou can use the `dragScope` & `dropScope` property on `draggable` and `droppable` respectively to restrict user from dropping a `draggable` element into a `droppable`.\r\n The Scope properties can either be string or an Array of string (to indicate multiple scope). The scopes must match in both to indicate compatible drag-drop zones.\r\n \r\n In the following example, only the `draggable` with the `drink` dropScope can be dropped on the first `droppable` and both `drink` and `meal` can be dropped in the second one.\r\n \r\n```html\r\n<ul>\r\n  <li draggable [dragScope]=\"'drink'\">Coffee</li>\r\n  <li draggable [dragScope]=\"'drink'\">Tea</li>\r\n  <li draggable [dragScope]=\"'meal'\">Biryani</li>\r\n  <li draggable [dragScope]=\"'meal'\">Kebab</li>\r\n  ...\r\n</ul>               \r\n```\r\n\r\n```html\r\n<div droppable [dropScope]=\"'drink'\" [dragOverClass]=\"'drag-target-border'\">\r\n  <p>Only Drinks can be dropped in the above container</p>\r\n</div>               \r\n\r\n<div droppable [dropScope]=\"['drink', 'meal']\" [dragOverClass]=\"'drag-target-border'\">\r\n  <p>Both Meal and Drinks can be dropped in the above container</p>\r\n</div>               \r\n```\r\n  \r\n### Transfer Data via Drag Drop\r\nYou can transfer data from the `draggable` to the `droppable` via the `dragData` property on the `draggable` directive. \r\n The data will be received in the `(onDrop)` event of the `droppable`:\r\n\r\n```js\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app',\r\n    template: `\r\n<h3>Transfer Data via Drag Drop</h3>\r\n<div class=\"row\">\r\n    <div class=\"col-sm-3\">\r\n        <ul class=\"list-group\">\r\n            <li draggable *ngFor=\"let item of items\" [dragData]=\"item\" class=\"list-group-item\">{{item.name}}</li>\r\n        </ul>\r\n    </div>\r\n    \r\n    <div class=\"col-sm-3\">\r\n    <div class=\"panel panel-default\" droppable (onDrop)=\"onItemDrop($event)\">\r\n        <div class=\"panel-heading\">Drop Items here</div>\r\n            <div class=\"panel-body\">\r\n                <li *ngFor=\"let item of droppedItems\" class=\"list-group-item\">{{item.name}}</li>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`\r\n})\r\nexport class AppComponent {\r\n    items = [\r\n            {name: \"Apple\", type: \"fruit\"},\r\n            {name: \"Carrot\", type: \"vegetable\"},\r\n            {name: \"Orange\", type: \"fruit\"}];\r\n            \r\n    onItemDrop(e: any) {\r\n        // Get the dropped data here\r\n        this.droppedItems.push(e.dragData);\r\n    }\r\n    constructor() { }\r\n}             \r\n```\r\n\r\n### Drag Handle\r\nDrag Handle can be defined for a `draggable` item which will restrict drag of the element unless the item is dragged from the specified element.\r\n The handle should be a valid selector string. Example: \r\n```html\r\n<li draggable [dragHandle]=\"'.drag-handle'\">\r\n   Not Draggable by list item but by the handle only.    \r\n   <div class=\"pull-right\"><i class=\"drag-handle fa fa-bars fa-lg\" aria-hidden=\"true\"></i></div> \r\n</li>               \r\n```\r\n\r\n### Drag Helper Image\r\nBy default when an element is dragged, a translucent image is generated from the drag target. This image is generated automatically and varies with browser. A custom image can be used if desired. Pass the url of the image to `[dragImage]` on the `draggable` directive.\r\n\r\n```html\r\n<li draggable [dragImage] = \"'../../images/drag-helper.png'\" >\r\n   Not Draggable by list item but by the handle only.    \r\n   <div class=\"pull-right\"><i class=\"drag-handle fa fa-bars fa-lg\" aria-hidden=\"true\"></i></div> \r\n</li>               \r\n```\r\n__Compatibility:__ This only works on Chrome & Firefox. Not supported on Edge.\r\n\r\n### Adding visual cues\r\nBoth the `draggable` & `droppable` directives take a bunch of inputs that let you apply class on various events. Here is the list:\r\n\r\n__Draggable Directive__\r\n1. [dragHandleClass](#draggable-directive)\r\n2. [dragClass](#draggable-directive)\r\n\r\n__Droppable Directive__\r\n1. [dragOverClass](#droppable-directive)\r\n2. [dragHintClass](#droppable-directive)\r\n \r\n Here is how a custom class is applied to a draggable element:\r\n ```html\r\n <div draggable [dragHandleClass]=\"'my-draggable'\">\r\n   <p>Drop items here</p>\r\n </div>               \r\n ```\r\n\r\n# API Doc\r\n### Draggable directive\r\n\r\n### Attributes\r\n\r\n| Name   | Type      |Default Value |Description |\r\n|:-------|:----------|:-------------|:-----------|\r\n| `dragData`    |   `any` | `null` | The data that will be avaliable to the droppable directive on its `onDrop()` event. |\r\n| `dragScope`   |    `string | Array<string>` | `'default'`   |  Defines compatible drag drop pairs. Values must match with `droppable.dropScope`. |\r\n| `dragClass` (previously `dragOverClass`) | `string` | `'drag-border'` | CSS class applied on the draggable that is applied when the item is being dragged. |\r\n| `dragHandleClass`  | `string` | `'drag-handle'` | The CSS class applied to a draggable element. If a dragHandle is defined then its applied to that handle element only. By default it is used to change the mouse over pointer. |\r\n| `draghandle` | `string` | `null` | The selector that defines the drag Handle. If defined drag will only be allowed if dragged from the selector element. |\r\n| `dragImage` | `string` | `null` | The url to image that will be used as custom drag image when the draggable is being dragged. |\r\n| `dragEnabled` | `boolean` | `true` | Defines if drag is enabled. `true` by default. |\r\n\r\n### Events\r\n\r\n| Name   | Parameters  |Description |\r\n|:-------|:------------|:-----------|\r\n| `onDragStart`  | e: DOM event   | Event fired when Drag is started  |\r\n| `onDrag`       | e: DOM event   | Event fired while the element is being dragged |\r\n| `onDragEnd`    | e: DOM event   | Event fired when dragged ends |\r\n\r\nFor more information on Drag DOM Events: [Drag Event](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent) \r\n\r\n### Droppable directive\r\n\r\n### Attributes\r\n\r\n| Name   | Type      |Default Value |Description |\r\n|:-------|:----------|:-------------|:-----------|\r\n| `dropScope` |    `string | Array<string>` | `'default'`   |   Defines compatible drag drop pairs. Values must match with `draggable.dragScope` |\r\n| `dragOverClass` | `string` | `'drag-over-border'` | CSS class applied on the droppable element when the item is being dragged over valid drop target. |\r\n| `dragHintClass` | `string` | `'drag-hint-border'` | CSS class applied on this droppable when a compatible draggable item is being dragged. This can be used to visually show allowed drop zones. |\r\n| `dropEnabled` | `boolean` | `true` | Defines if drop is enabled. `true` by default. |\r\n\r\n### Events\r\n\r\n| Name   | Parameters  |Description |\r\n|:-------|:------------|:-----------|\r\n| `onDragEnter`  | e: DOM event   | Event fired when Drag dragged element enters a valid drop target.  |\r\n| `onDragOver`       | e: DOM event   | Event fired when an element is being dragged over a valid drop target. |\r\n| `onDragLeave`    | e: DOM event   | Event fired when a dragged element leaves a valid drop target. |\r\n| `onDrop`    | e: `DropEventModel`   | Event fired when an element is dropped on a valid drop target. |\r\n\r\n# License\r\n\r\nMIT\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ObaidUrRehman/ng2-drag-drop.git"
  },
  "scripts": {
    "build": "npm run transpile",
    "lint": "tslint ./src/**/*.ts -t verbose",
    "prepublish": "npm run build",
    "start": "tsc -w",
    "test": "echo \"Error: no test specified\" && exit 0",
    "transpile": "ngc",
    "tsc": "tsc"
  },
  "version": "2.0.0"
}
